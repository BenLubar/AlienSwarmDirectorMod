@include "swarm.fgd"

@SolidClass base(trigger_multiple) = mod_dynaimic_difficulty_modifier_trigger: "Fires only if the Marines have reached the Difficulty Threshold"
[
	minDifficultyThreshold(integer) : "Minimum Difficulty Threshold" : 1 : "Min Threshold value."
	maxDifficultyThreshold(integer) : "Maximum Difficulty Threshold" : 3 : "Max Threshold value."
	maxTriggerFire(integer) : "Maximum Trigger Fire Count" : 1 : "Maximum number of times the trigger will recalculate player performance and fire a set of triggers.  Set to -1 to trigger infinetly"

	output OnTriggerEasy(void) : "Fires if the marine(s) are at an Easy difficulty level."
	output OnTriggerMedium(void) : "Fires if the marine(s) are at an Medium difficulty level."
	output OnTriggerHard(void) : "Fires if the marine(s) are at an Hard difficulty level."
	output OnTriggerAtleastEasy(void) : "Fires if the marine(s) are atleast at an Easy difficulty level. Ie, always fires."
	output OnTriggerAtleastMedium(void) : "Fires if the marine(s) are atleast at an Medium difficulty level. Ie fires when performance is 2 or 3."
	output OnTriggerAtleastHard(void) : "Fires if the marine(s) are atleast at an Hard difficulty level.  Ie, fires when performance is 3."
	input SetMaxFireCount(integer) : "Sets the Max Fire Count and resets the number of times the trigger has fired to 0."
	
]

@SolidClass base(trigger_asw_door_area) = mod_dynamic_door_area :
	"Mod of trigger_asw_door_area that supports difficulty threshold requirements"
[

	minDifficultyThreshold(integer) : "Minimum Difficulty Threshold" : 1 : "Min Threshold value."
	maxDifficultyThreshold(integer) : "Maximum Difficulty Threshold" : 3 : "Max Threshold value."

]

@PointClass base(Targetname, ASWObjective) iconsprite("editor/asw_objective_escape.vmt") = mod_objective_escape : 
	"Alien Swarm Escape Objective"
[
    objectivetitle(string) : "Objective Title" : "" : "Title to use for this objective in the list on the briefing screen, or in-game for the current objective HUD display."
	input MarineInEscapeArea(void) : "MarineInEscapeArea"
]

@PointClass base(Targetname, EnableDisable) iconsprite("editor/asw_objective_dummy.vmt") = mod_marker : 
	"Alien Swarm Mission Marker"
[
	objectivename(target_destination) : "Objective Name" : "" : "Name of the target object this is associated with."
	mapwidth(integer) : "Map Width" : 256 : "Size of the map marker in world units."
	mapheight(integer) : "Map Height" : 256 : "Size of the map marker in world units."
	
	input SetComplete(void) : "Mark as complete."
]

@PointClass base(Targetname) iconsprite("editor/asw_objective_dummy.vmt") = mod_build_mission_map_for_next_mission: 
	"Builds the mission map for the next mission"
[	
	input Activate(void) : "Begins building the mission map for the next mission."
]

@SolidClass base(Targetname, Parentname, Origin, RenderFields, Global, Inputfilter, EnableDisable, Shadow) = func_asw_fade : 
	"A func_brush that fades when the camera is third person and the marine is below the origin." 
[
	spawnflags(flags) =
	[
		2: "Ignore player +USE" : 1
	]

	_minlight(string) : "Minimum Light Level" : : "The minimum level of ambient light that hits this brush."
	Solidity(choices) : "Solidity" : 2 : "Used to control the solidity/collision of these brushes." =
	[
		0 : "Toggle"
		1 : "Never Solid"
		2 : "Always Solid"
	]
	excludednpc(string) : "NPC class excluded from collisions" : "" : "If an NPC classname is specified here, NPCs of that type won't collide with these brushes. In Episodic, you may also specify an individual entity's name."
	invert_exclusion(choices) : "Invert NPC class exclusion" : 0 : "If set, then the excluded NPC class will consider this brush solid, and all other NPC classes will consider it non-solid." =
	[
		0 : "No"
		1 : "Yes"
	]	

	solidbsp(boolean) : "Solid BSP" : 0 : "Set this if this brush is in heirarchy with a moving object of some kind, and the player can stand on this brush."

	vrad_brush_cast_shadows(boolean) : "Shadows" : 1 : "Set this if this brush casts lightmap shadows."

	fade_opacity(integer) : "Fade Alpha (0-255)" : 0 : "Opacity to fade to when in third person and the marine is below the origin."

	input SetExcluded( string ) : "Change the NPC class excluded from collisions"
	input SetInvert( integer ) : "Set the state of invversion for NPC class exclusion (0 or 1)"
]

@PointClass base(prop_dynamic_base, EnableDisable) sphere(fademindist) sphere(fademaxdist) studioprop() = prop_asw_fade :
	"A prop_dynamic that fades when the camera is third person and the marine is below the origin."
[
	fade_opacity(integer) : "Fade Alpha (0-255)" : 0 : "Opacity to fade to when in third person and the marine is below the origin."
	fade_origin(origin) : "Fade Origin (X Y Z)" : : ""
]

@SolidClass base(Trigger) = trigger_rd_sticktogether_area :
	"A trigger volume that will force bot marines to immediately follow leader inside this volume. Requires info_marine_hint or info_node_marine_hint entities inside the volume to work "
[
]
